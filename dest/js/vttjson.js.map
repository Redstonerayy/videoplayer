{"version":3,"sources":["vttjson.js"],"names":["convertVttToJson","vttString","Promise","resolve","reject","current","sections","start","vttArray","split","forEach","line","index","replace","indexOf","push","clone","timeString2ms","trimRight","pop","end","trimLeft","shift","part","length","regex","section","cleanText","results","cleanArray","s","resultsArray","n","item","reduce","i","pair","key","cleanWord","word","words","a","b","toLowerCase","constructor","obj","hasOwnProperty","attr","copy"],"mappings":"AAAA,SAASA,iBAAiBC,GACtB,OAAO,IAAIC,QAASC,CAAAA,EAASC,KACrBC,IAAAA,EAAJ,GACIC,EAAJ,GACIC,GAAQ,EACRC,EAAWP,EAAUQ,MAAV,MACfD,EAASE,QAASC,CAADA,EAAOC,KAEnB,MADQC,EAAAA,QAAQ,kBAAb,KAGA,IAAAF,EAAAE,QAAA,kBAAA,OADgC,IAAzBF,EAAKG,QAAQ,WAGhBT,GAAQE,EAEXF,EAAAE,OADDD,EAASS,KAAKC,MAAMX,IAKfY,EAAAA,CACCV,MAAAU,cAAAN,EAAAF,MAAA,UAAA,GAAAS,YAAAT,MAAA,KAAAU,OAHNC,IAAAH,cAAAN,EAAAF,MAAA,UAAA,GAAAY,WAAAZ,MAAA,KAAAa,SAMGC,KAASV,KAK2C,KAA3CP,EAASA,QAASkB,kBAAiBX,KAEJ,MAA3BR,EAAQkB,QAAKC,kBAAc,KAA/BjB,IAI8BgB,IAAlBA,EAAQC,OAEpBlB,EAAAA,EAAAkB,OAAA,GAAAD,KAAAV,QAAA,kBAAA,MAAAF,EAAAE,QAAA,kBAAA,MAN4B,IAAxBR,EAAQkB,KAAKC,OAOHhB,EAASgB,KAAvBb,EAGHN,EAAAkB,QAAAlB,EAAAkB,QAAAZ,IAGmBN,IAApBG,EAAAgB,OAAA,GACAlB,EAAAS,KAAAC,MAAAX,MArChBA,EAAAkB,KAAAZ,EA2CAL,EAAAS,KAAAC,MAAAX,IAEYA,EAAAkB,KAAZ,QAMS,IAD4ClB,EAAA,GAD7CoB,EAAA,oBADJnB,EAAAI,QAAAgB,IAKAC,KAAYC,EAAOL,KAAIV,QACvBgB,IAAUD,EAAGD,KAAUlB,IAAM,SAA7BqB,GACAC,OAAAD,EAAAjB,QAAAY,EAAA,SAAAO,GACWtB,OAAQsB,EAAAvB,MAASwB,IAATC,OAAc,SAAAJ,EAAAK,GAAA,WAAAH,EAAAnB,QAAA,IAAA,IAAAA,QAAA,IAAA,OAAA,OAGzBc,UAAcC,EAAd,GAAAf,QAAA,kBAAA,IACAgB,WAAYO,UAAZ3B,MAAA,KALRsB,aAAe,GAMPF,WAAGnB,QAAgB,SAAUuB,GACzB,IACHG,EAJGC,GAGA,EAAAJ,EAAAnB,QAAA,OAHAuB,GAIHD,EAAAH,EAAAxB,MAAA,OAJc,GAKG2B,EAAA,GACEH,IAAVK,GAAU,MAAK7B,GAGtBsB,aAAAhB,KAAA,CACUA,KAAKuB,UAAAL,EAAAxB,MAAA,MAAA,IACR6B,KAAUL,cADFA,EAAAxB,MAAA,MAAA,OAIrBsB,aAAAhB,KAAA,CAjBLwB,KAAAD,UAAAL,GAoBgBF,UAAAA,MAO5BL,EAAAc,MAAAT,aACAL,EAAAH,KAAAG,EAAAH,KAAAV,QAAA,kBAAA,MALQV,EAAQG,KAWf,SAEDW,cAAAwB,EAAAC,GANI,SAAOD,EAAEA,EAAEhC,MAAM,MACb,IAAM,GAOV,MADJgC,EAAAA,EAAA,GAASH,MAAAA,MACEC,GAAK1B,KAAL0B,EAAK1B,GAAQ,GAAA4B,EAAA,KAAAA,EAAA,GAAbA,EAA8B,GAAIE,GAAlCF,EAAkCE,KAAAA,EAAAA,IAAzCF,EAAA,IAIA,SAAIH,UAAAC,GACJ,OAAQA,EAAM1B,QAAC+B,gBAAf,IAAAD,cAEI,SAAIE,MAAIC,GACX,GAAA,MAAAD,GAAA,iBAAAA,EAAA,OAAAA,EAHD,IAIAE,EAJIC,EAAOH,EAAID,cAIf,IAAAG,KAAAF,EACHA,EAAAC,eAAAC,KAAAC,EAAAD,GAAAF,EAAAE,IAGD,OAAAC","file":"vttjson.js","sourcesContent":["function convertVttToJson(vttString) {\r\n    return new Promise((resolve, reject) => {\r\n        var current = {}\r\n        var sections = []\r\n        var start = false;\r\n        var vttArray = vttString.split('\\n');\r\n        vttArray.forEach((line, index) => {\r\n            if (line.replace(/<\\/?[^>]+(>|$)/g, \"\") === \" \"){\r\n            } else if (line.replace(/<\\/?[^>]+(>|$)/g, \"\") == \"\") {\r\n            } else if (line.indexOf('-->') !== -1 ) {\r\n                start = true;\r\n\r\n                if (current.start) {\r\n                sections.push(clone(current))\r\n                }\r\n\r\n                current = {\r\n                start: timeString2ms(line.split(\"-->\")[0].trimRight().split(\" \").pop()),\r\n                end: timeString2ms(line.split(\"-->\")[1].trimLeft().split(\" \").shift()),\r\n                part: ''\r\n                }\r\n\r\n            } else if (line.replace(/<\\/?[^>]+(>|$)/g, \"\") === \"\"){\r\n            } else if (line.replace(/<\\/?[^>]+(>|$)/g, \"\") === \" \"){\r\n            } else {\r\n                if (start){\r\n                    if (sections.length !== 0) {\r\n                        if (sections[sections.length - 1].part.replace(/<\\/?[^>]+(>|$)/g, \"\") === line.replace(/<\\/?[^>]+(>|$)/g, \"\")) {\r\n                        } else {\r\n                            if (current.part.length === 0) {\r\n                                current.part = line\r\n\r\n                            } else {\r\n                                current.part = `${current.part} ${line}`\r\n                            }\r\n                            // If it's the last line of the subtitles\r\n                            if (index === vttArray.length - 1) {\r\n                                sections.push(clone(current))\r\n                            }\r\n                        }\r\n                    } else {\r\n                        current.part = line\r\n                        sections.push(clone(current))\r\n                        current.part = ''\r\n                    }\r\n                }\r\n            }\r\n        })\r\n  \r\n        current = []\r\n    \r\n        var regex = /(<([0-9:.>]+)>)/ig\r\n        sections.forEach(section => {\r\n            strs = section.part.split()\r\n            var results = strs.map(function(s){\r\n                return s.replace(regex, function(n){\r\n                    return n.split('').reduce(function(s,i){ return `==${n.replace(\"<\", \"\").replace(\">\", \"\")}` }, 0)\r\n                })\r\n            });\r\n            cleanText = results[0].replace(/<\\/?[^>]+(>|$)/g, \"\");\r\n            cleanArray = cleanText.split(\" \")\r\n            resultsArray = [];\r\n            cleanArray.forEach(function(item){\r\n                if (item.indexOf('==') > -1) {\r\n                    var pair = item.split(\"==\")\r\n                    var key = pair[0]\r\n                    var value = pair[1]\r\n                    if(key == \"\" || key == \"##\") {\r\n                        return;\r\n                    }\r\n                    resultsArray.push({\r\n                        word: cleanWord(item.split(\"==\")[0]),\r\n                        time: timeString2ms(item.split(\"==\")[1]),\r\n                    })\r\n                } else {\r\n                    resultsArray.push({\r\n                        word: cleanWord(item),\r\n                        time: undefined,\r\n                    })\r\n                }\r\n            });\r\n            \r\n            section.words = resultsArray;\r\n            section.part = section.part.replace(/<\\/?[^>]+(>|$)/g, \"\")\r\n        });\r\n        resolve(sections);\r\n    })\r\n}\r\n  \r\n// helpers\r\n// http://codereview.stackexchange.com/questions/45335/milliseconds-to-time-string-time-string-to-milliseconds\r\nfunction timeString2ms(a,b){// time(HH:MM:SS.mss) // optimized\r\n    return a=a.split('.'), // optimized\r\n    b=a[1]*1||0, // optimized\r\n    a=a[0].split(':'),\r\n    b+(a[2]?a[0]*3600+a[1]*60+a[2]*1:a[1]?a[0]*60+a[1]*1:a[0]*1)*1e3 // optimized\r\n}\r\n  \r\n// removes everything but characters and apostrophe and dash\r\nfunction cleanWord(word) {\r\n    return word.replace(/[^0-9a-z'-]/gi, '').toLowerCase()\r\n}\r\n  \r\nfunction clone(obj) {\r\n    if (null == obj || \"object\" != typeof obj) return obj;\r\n    var copy = obj.constructor();\r\n    for (var attr in obj) {\r\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\r\n    }\r\n    return copy;\r\n}\r\n\r\n/*\r\nconvertVttToJson(`\r\nWEBVTT - This file has cues\r\n\r\n00:00:20.000 --> 00:00:25.000\r\n- Har en kopp te.\r\n- Det smakar som te.\r\n`).then((json) => {\r\n    console.log(json);\r\n});\r\n*/"]}