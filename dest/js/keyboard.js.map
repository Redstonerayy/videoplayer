{"version":3,"sources":["keyboard.js"],"names":["constructor","description","shift","ctrl","action","this","keycode","KeyBoardInterface","keys","event","pressedkeys","filter","key","code","forEach","shiftKey","ctrlKey","args","window","removeEventListener","addEventListener","keylistener","bind","includes","push","instance","Key","video","paused","muted","togglePlay","f","console","currentTime","toggleFullScreen","m","volumesliderfill","toggleMute","arrowdown","log","arrowleft","keyboard","ended","play","arrowright","arrowup","volumeslider","volume","updateVolumeIcon","value","style","width","p","start","two"],"mappings":"MAMIA,gBACSC,EAAcA,EAAnBC,EAAAC,EAAAC,GACAC,KAAKC,YAALL,EACAI,KAAKH,QAALI,EACAD,KAAAH,MAAAA,EACAG,KAAKD,KAASA,EACjBC,KAAAD,OAAAA,SAQCG,8BACUC,GACRH,KAAAG,KAAAA,cAGQC,GACJC,IAAAA,EAAcL,KAAAG,KAAUG,OAAOC,GAAnCA,EAAAN,SAAAG,EAAAI,MAQYC,EAAAA,OAAWL,EAAIM,UACvBH,EAAWT,MAAXM,EAAAO,SAIFC,EAAKH,QAAAF,IACFK,EAAOA,OAAZZ,KAAAY,cAIEA,GACFC,KAAOC,KAAAA,EACVD,OAAAE,iBAAA,UAAAf,KAAAgB,YAAAC,KAAAjB,cAIOa,OAAAC,oBAAA,UAAAd,KAAAgB,yBAFIT,GA5BOP,KAAAG,KAAAe,SAAAX,IAmCvBP,KAAAG,KAAAgB,KAAAZ,IAcYK,MAAAA,EAAKQ,IAAAA,IACR,gBAVT,QAcA,GAMQR,EANRA,IAUUA,EAAIS,SACTC,MADKC,OAMOX,EAAGA,SAAKQ,WAAjB,QAESI,EAATJ,SAAeK,WAAA,WARvBC,EAAA,IAAAL,IAgBA,oBAMQM,QANR,GAUA,EAMQf,IAEMgB,EAAAA,SAANC,qBAGCC,EAAA,IAAAT,IAXT,cAeA,QAMQT,GANR,EAUAA,IAMyBQ,EAAAA,SAAjBE,MAEIS,MAlDAnB,EAAKQ,SAASY,WAAW,UAEzBpB,EAAKQ,SAASY,WAAW,UA4D/BC,EAAAA,IAAAA,IAME,eACA,QACA,GA3DJ,EA8DIX,IA5DAK,QAAQO,IAAI,OAiDpBC,UAAA,IAAAd,IAoBIe,aACJA,aAAiBhB,GAAjB,EA7DKR,IACG,IAAIU,EAAQV,EAAKQ,SAASE,MAE1BA,EAAMM,aAAe,EAClBN,EAAMe,OACLf,EAAMgB,SAKZC,WAAa,IAAIlB,IAClB,kBACD,cACA,GACA,EACCT,IACGA,EAAKQ,SAASE,MAAMM,aAAe,IAIrCY,QAAU,IAAInB,IACf,aACD,WACA,GACA,EACCT,IACG,IAAIU,EAAQV,EAAKQ,SAASE,MACtBmB,EAAe7B,EAAKQ,SAASqB,aAC7BV,EAAmBnB,EAAKQ,SAASW,iBAGrCT,EAAMoB,OAAgC,EAAtBpB,EAAMoB,OAAS,GAAW,EAAKpB,EAAMoB,OAAS,GAG9D9B,EAAKQ,SAASuB,iBAAgC,IAAfrB,EAAMoB,QACrCD,EAAaG,MAAuB,IAAftB,EAAMoB,OAC3BX,EAAiBc,MAAMC,SAAiC,GAAtBL,EAAaG,MAAaH,EAAaG,MAAM,EAAI,QAIrFX,UAAY,IAAIZ,IACjB,aACD,aACA,GACA,EACCT,IACG,IAAIU,EAAQV,EAAKQ,SAASE,MACtBmB,EAAe7B,EAAKQ,SAASqB,aAC7BV,EAAmBnB,EAAKQ,SAASW,iBAGrCT,EAAMoB,OAAUpB,EAAMoB,OAAS,GAAO,EAAI,EAAKpB,EAAMoB,OAAS,GAG9D9B,EAAKQ,SAASuB,iBAAgC,IAAfrB,EAAMoB,QACrCD,EAAaG,MAAuB,IAAftB,EAAMoB,OAC3BX,EAAiBc,MAAMC,SAAiC,GAAtBL,EAAaG,MAAaH,EAAaG,MAAM,EAAI,QAI3F,IAAIR,SAAW,IAAIlC,kBAAkB,CAAC6C,EAAGrB,EAAGI,EAAG,EAAGK,UAAWI,WAAYC,QAASP,YAClFG,SAASY,MAAM,CAAE5B,SAAU6B","file":"keyboard.js","sourcesContent":["/* ------------------------------------------------\r\n       KEYCLASS\r\n       \r\n-------------------------------------------------*/\r\n\r\nclass Key{\r\n    constructor(description, keycode, shift, ctrl, action){\r\n        this.description = description;\r\n        this.keycode = keycode;\r\n        this.shift = shift;\r\n        this.ctrl = ctrl;\r\n        this.action = action\r\n    }\r\n}\r\n\r\n/* ------------------------------------------------\r\n       KEYBOARDINTERFACE\r\n       \r\n-------------------------------------------------*/\r\n\r\nclass KeyBoardInterface{\r\n    constructor(keys){\r\n        this.keys = keys;\r\n    }\r\n\r\n    keylistener(event){\r\n        let pressedkeys = this.keys.filter((key) => {\r\n            return(\r\n                key.keycode == event.code &&\r\n                key.shift == event.shiftKey &&\r\n                key.ctrl == event.ctrlKey\r\n            )\r\n        });\r\n        \r\n        pressedkeys.forEach(key => {\r\n            key.action(this.args);\r\n        });\r\n    }\r\n\r\n    start(args){\r\n        this.args = args;\r\n        window.addEventListener(\"keydown\", this.keylistener.bind(this));\r\n    }\r\n\r\n    stop(){\r\n        window.removeEventListener(\"keydown\", this.keylistener);\r\n    }\r\n\r\n    registerKey(key){\r\n        if(!this.keys.includes(key)){\r\n            this.keys.push(key);\r\n        }\r\n    }\r\n}\r\n\r\n/* ------------------------------------------------\r\n                   KEYS\r\n                   \r\n-------------------------------------------------*/\r\n\r\nconst p = new Key(\r\n    `Play or Pause`,\r\n    \"KeyP\",\r\n    false,\r\n    false,\r\n    (args) => {\r\n        if(args.instance.video.paused){\r\n            args.instance.togglePlay(\"play\");\r\n        } else {\r\n            args.instance.togglePlay(\"pause\");\r\n        }\r\n    }\r\n);\r\n\r\nconst f = new Key(\r\n    `Toggle Fullscreen`,\r\n    \"KeyF\",\r\n    false,\r\n    false,\r\n    (args) => {\r\n        args.instance.toggleFullScreen();\r\n    }\r\n);\r\n\r\nconst m = new Key(\r\n    `Toggle Mute`,\r\n    \"KeyM\",\r\n    false,\r\n    false,\r\n    (args) => {\r\n        let video = args.instance.video;\r\n\r\n        if(video.muted){\r\n            args.instance.toggleMute(\"unmute\");\r\n        } else {\r\n            args.instance.toggleMute(\"mute\");\r\n        }\r\n    }\r\n);\r\n\r\nconst o = new Key(\r\n    `Open Options`,\r\n    \"KeyO\",\r\n    false,\r\n    false,\r\n    (args) => {\r\n        console.log(\"o\");\r\n    }\r\n);\r\n\r\nconst arrowleft = new Key(\r\n    `Go Back 5s`,\r\n    \"ArrowLeft\",\r\n    false,\r\n    false,\r\n    (args) => {\r\n        let video = args.instance.video;\r\n\r\n        video.currentTime -= 5;\r\n        if(video.ended){\r\n            video.play();\r\n        }\r\n    }\r\n);\r\n\r\nconst arrowright = new Key(\r\n    `Fast Forward 5s`,\r\n    \"ArrowRight\",\r\n    false,\r\n    false,\r\n    (args) => {\r\n        args.instance.video.currentTime += 5;\r\n    }\r\n);\r\n\r\nconst arrowup = new Key(\r\n    `Volume +10`,\r\n    \"ArrowUp\",\r\n    false,\r\n    false,\r\n    (args) => {\r\n        let video = args.instance.video;\r\n        let volumeslider = args.instance.volumeslider;\r\n        let volumesliderfill = args.instance.volumesliderfill;\r\n        \r\n        //set volume of video\r\n        video.volume = (video.volume + 0.1) > 1 ? 1 : (video.volume + 0.1);\r\n\r\n        //gui\r\n        args.instance.updateVolumeIcon(video.volume * 100);\r\n        volumeslider.value = video.volume * 100;\r\n        volumesliderfill.style.width = `${volumeslider.value != 0 ? volumeslider.value/2 : 0}px`;\r\n    }\r\n);\r\n\r\nconst arrowdown = new Key(\r\n    `Volume -10`,\r\n    \"ArrowDown\",\r\n    false,\r\n    false,\r\n    (args) => {\r\n        let video = args.instance.video;\r\n        let volumeslider = args.instance.volumeslider;\r\n        let volumesliderfill = args.instance.volumesliderfill;\r\n        \r\n        //set volume of video\r\n        video.volume = (video.volume - 0.1) < 0 ? 0 : (video.volume - 0.1);\r\n\r\n        //gui\r\n        args.instance.updateVolumeIcon(video.volume * 100);\r\n        volumeslider.value = video.volume * 100;\r\n        volumesliderfill.style.width = `${volumeslider.value != 0 ? volumeslider.value/2 : 0}px`;\r\n    }\r\n);\r\n\r\nvar keyboard = new KeyBoardInterface([p, f, m, 0, arrowleft, arrowright, arrowup, arrowdown]);\r\nkeyboard.start({ instance: two});"]}